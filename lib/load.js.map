{"version":3,"sources":["../src/load.js"],"names":[],"mappings":"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","file":"load.js","sourcesContent":["const fs = require('fs')\n  , path = require('path')\n  , cheerio = require('cheerio');\n\n/** \n *  Loads and parses the input source files.\n *\n *  @function sources\n *\n *  @param {Array} files list of input HTML files.\n *  @param {Function} cb callback function.\n */\nfunction sources(files, cb) {\n  let map = {}; \n\n  function next(err) {\n    if(err) {\n      return cb(err); \n    }\n    const file = files.shift();\n    if(!file) {\n      return cb(null, map); \n    }\n\n    fs.readFile(file, (err, contents) => {\n      if(err) {\n        return cb(err); \n      }\n      map[file] = contents.toString();\n      next();\n    })\n  }\n\n  next();\n}\n\n/** \n *  Finds all import `<link>` elements in the input component files. \n *\n *  @function imports\n *\n *  @param {Object} map object mapping filenames to component files.\n *  @param {Function} cb callback function.\n */\nfunction imports(map, cb) {\n  let k\n    , base\n    , relative\n    , $\n    , out = {};\n\n  function it(index, elem) {\n    const href = $(elem).attr('href');\n    relative = path.normalize(path.join(base, href));\n    out[k].push(relative);\n  }\n\n  for(k in map) {\n    out[k] = [];\n    base = path.dirname(k);\n    $ = cheerio.load(map[k]);\n    $('link[rel=\"import\"][href]').each(it);\n  }\n\n  cb(null, out);\n}\n\n/**\n *  @private\n */\nfunction read(name, imports, out, cb) {\n  out[name] = []; \n\n  function next() {\n    const file = imports.shift();\n    if(!file) {\n      return cb(); \n    }\n\n    fs.readFile(file, (err, contents) => {\n      if(err) {\n        return cb(err); \n      }\n\n      const map = {\n        file: file,\n        contents: contents.toString()\n      }\n\n      // empty component file\n      if(!map.contents) {\n        return cb(new Error(`component file ${file} is empty`));\n      }\n\n      out[name].push(map);\n\n      next();\n    })\n  }\n\n  next();\n}\n\n/** \n *  Loads component include files.\n *\n *  @function includes\n *\n *  @param {Object} map object mapping filenames to component files.\n *  @param {Function} cb callback function.\n */\nfunction includes(map, cb) {\n  const keys = Object.keys(map);\n\n  const out = {};\n\n  function next(err) {\n    if(err) {\n      return cb(err); \n    }\n    const file = keys.shift();\n    const imports = map[file];\n    if(!file) {\n      return cb(null, out); \n    }\n\n    out[file] = [];\n    read(file, imports, out, next);\n  }\n\n  next();\n}\n\nfunction load(opts, cb) {\n  opts = opts || {};\n\n  if(!opts.files || !opts.files.length) {\n    return cb(new Error('no input files specified'));\n  }\n\n  sources(opts.files || [], (err, map) => {\n    if(err) {\n      return cb(err); \n    } \n    imports(map, (err, files) => {\n      if(err) {\n        return cb(err); \n      }\n      includes(files, (err, contents) => {\n        if(err) {\n          return cb(err); \n        }\n        cb(null, contents);\n      })\n    })\n  })\n}\n\nmodule.exports = load;\n"]}